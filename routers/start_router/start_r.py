from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from database.db import ReviewDB
from config.create_bot import bot, ADMIN

from routers.review_router.review_keyboards import get_start_review_kb
from routers.states import ReviewStates, AdminAnswer  # –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –æ–±—â–µ–≥–æ –º–æ–¥—É–ª—è


start_router = Router()
review_db = ReviewDB()


def is_admin(user_id: int) -> bool:
    return user_id == int(ADMIN)


@start_router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.",
        reply_markup=get_start_review_kb()
    )


@start_router.callback_query(lambda c: c.data == "start_review")
async def callback_start_review(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤.")
    await state.set_state(ReviewStates.waiting_for_review)  
    await callback.answer()


@start_router.message(Command('reviews'))
async def cmd_reviews(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    reviews = review_db.get_unanswered_reviews()
    if not reviews:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
        return

    for review_id, user_id, username, review_text in reviews:
        text = f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (id: {user_id}):\n\n{review_text}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{review_id}_{user_id}")]
        ])
        await message.answer(text, reply_markup=kb)


@start_router.callback_query(lambda c: c.data and c.data.startswith("answer_"))
async def callback_answer_review(callback: CallbackQuery, state: FSMContext):
    user = callback.from_user.id
    if not is_admin(user):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    _, review_id_str, user_id_str = callback.data.split("_", 2)
    review_id = int(review_id_str)
    user_id = int(user_id_str)

    await state.update_data(review_id=review_id, user_id=user_id)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id}:")
    await state.set_state(AdminAnswer.waiting_for_answer)
    await callback.answer()


@start_router.message(AdminAnswer.waiting_for_answer)
async def process_admin_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    review_id = data.get("review_id")
    user_id = data.get("user_id")
    answer_text = message.text

    try:
        await bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n{answer_text}")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await state.clear()
        return

    review_db.mark_review_answered(review_id, answer_text)

    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ—Ç–∑—ã–≤ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π.")
    await state.clear()


@start_router.message(Command('all_reviews'))
async def cmd_all_reviews(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    unanswered = review_db.get_unanswered_reviews()
    answered = review_db.get_answered_reviews()

    if not unanswered and not answered:
        await message.answer("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    if unanswered:
        await message.answer("üìã *–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:*", parse_mode="Markdown")
        for review_id, user_id, username, review_text in unanswered:
            text = f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (id: {user_id}):\n\n{review_text}"
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{review_id}_{user_id}")]
            ])
            await message.answer(text, reply_markup=kb)
    else:
        await message.answer("–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")

    if answered:
        await message.answer("‚úÖ *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:*", parse_mode="Markdown")
        for review_id, user_id, username, review_text, admin_answer in answered:
            text = (f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (id: {user_id}):\n\n"
                    f"{review_text}\n\n"
                    f"üí¨ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n{admin_answer}")
            await message.answer(text, parse_mode="Markdown")
    else:
        await message.answer("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")


@start_router.message(Command(commands=["answer"]))
async def cmd_answer_review(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = message.text or ""
    parts = text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞. –ü—Ä–∏–º–µ—Ä: /answer 123")
        return

    review_id = int(parts[1])

    cursor = review_db.conn.execute(
        "SELECT user_id, answered FROM reviews WHERE id = ?", (review_id,)
    )
    row = cursor.fetchone()
    if not row:
        await message.answer(f"–û—Ç–∑—ã–≤ —Å ID {review_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    review_user_id, answered = row
    if answered:
        await message.answer(f"–û—Ç–∑—ã–≤ #{review_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return

    await state.update_data(review_id=review_id, user_id=review_user_id)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id}:")
    await state.set_state(AdminAnswer.waiting_for_answer)


@start_router.message(Command(commands=["admin"]))
async def cmd_admin(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    await message.answer("üìã *–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:*\n\n\
        '/reviews' - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤;\n\
        '/all_reviews' - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (—Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∞) –∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö;\n\
        '/answer &lt;id&gt;' - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º id.", parse_mode="HTML")
    
