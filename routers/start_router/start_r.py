import re
import logging
from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from database.db import ReviewDB
from config.create_bot import bot, ADMIN, ADMINISTRATOR, ADMINISTRATOR2

from routers.review_router.review_keyboards import get_start_review_kb
from routers.states import ReviewStates, AdminAnswer

start_router = Router()
review_db = ReviewDB()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    return user_id in {int(ADMINISTRATOR), int(ADMIN), int(ADMINISTRATOR2)}


def reorder_review_text(review_text: str) -> str:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç review_text –Ω–∞ –æ—Ç–∑—ã–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫, –º–µ–Ω—è–µ—Ç –∏—Ö –º–µ—Å—Ç–∞–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞.

    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç:
    <—Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞>

    –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª(–∞): <—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞>
    """
    parts = review_text.split("\n\n–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª(–∞): ")
    if len(parts) == 2:
        free_review, source = parts
        return f"–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏:\n{source}\n\n–û—Ç–∑—ã–≤:\n{free_review}"
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return review_text


@start_router.message(Command('reviews'))
async def cmd_reviews(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reviews ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /reviews")
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∫ /reviews")
        return

    reviews = review_db.get_unanswered_reviews()
    if not reviews:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
        logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    for review_id, user_id_r, username, review_text in reviews:
        formatted_text = reorder_review_text(review_text)
        text = f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (id: {user_id_r}):\n\n{formatted_text}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{review_id}_{user_id_r}")]
        ])
        await message.answer(text, reply_markup=kb)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


@start_router.callback_query(lambda c: c.data and c.data.startswith("answer_"))
async def callback_answer_review(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –Ω–∞ –æ—Ç–∑—ã–≤–µ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
    """
    user = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤–µ")
    if not is_admin(user):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ –æ—Ç–∑—ã–≤")
        return

    try:
        _, review_id_str, user_id_str = callback.data.split("_", 2)
        review_id = int(review_id_str)
        user_id_r = int(user_id_str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {callback.data} - {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    await state.update_data(review_id=review_id, user_id=user_id_r)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id}:")
    await state.set_state(AdminAnswer.waiting_for_answer)
    await callback.answer()
    logger.info(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}")


@start_router.message(AdminAnswer.waiting_for_answer)
async def process_admin_answer(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Ç–∑—ã–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–º–µ—á–∞–µ—Ç –æ—Ç–∑—ã–≤ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º.
    """
    data = await state.get_data()
    review_id = data.get("review_id")
    user_id = data.get("user_id")
    answer_text = message.text

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    try:
        await bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n{answer_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await state.clear()
        return

    review_db.mark_review_answered(review_id, answer_text)
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ—Ç–∑—ã–≤ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π.")
    await state.clear()
    logger.info(f"–û—Ç–∑—ã–≤ #{review_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π")


def parse_review_text(text: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–∑—ã–≤ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞:

    –û—Ç–∑—ã–≤: <—Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞>

    –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª(–∞): <–∏—Å—Ç–æ—á–Ω–∏–∫>
    –¢–µ–º—ã –≤—ã—Å—Ç–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª(–∞) –±—ã –≤–∏–¥–µ—Ç—å: <—Ç–µ–º—ã>

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∫–ª—é—á–∞–º–∏ 'review', 'source', 'subject'.
    """
    review = ""
    source = ""
    subject = ""

    # –†–∞–∑–æ–±—å—ë–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–∞–π–¥—ë–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    lines = text.splitlines()
    # –°–æ–±–∏—Ä–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–∑—ã–≤ ‚Äî –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å "–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª(–∞):"
    review_lines = []
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if line.startswith("–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª(–∞):"):
            break
        review_lines.append(line)
        i += 1
    review = "\n".join(review_lines).strip()

    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    while i < len(lines):
        line = lines[i].strip()
        if line.startswith("–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª(–∞):"):
            source = line[len("–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª(–∞):"):].strip()
            i += 1
            break
        i += 1

    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ç–µ–º—ã –≤—ã—Å—Ç–∞–≤–æ–∫
    while i < len(lines):
        line = lines[i].strip()
        if line.startswith("–¢–µ–º—ã –≤—ã—Å—Ç–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª(–∞) –±—ã –≤–∏–¥–µ—Ç—å:"):
            subject = line[len("–¢–µ–º—ã –≤—ã—Å—Ç–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª(–∞) –±—ã –≤–∏–¥–µ—Ç—å:"):].strip()
            break
        i += 1

    return {
        "review": review,
        "source": source,
        "subject": subject,
    }


@start_router.message(Command('all_reviews'))
async def cmd_all_reviews(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    unanswered = review_db.get_unanswered_reviews()
    answered = review_db.get_answered_reviews()

    if not unanswered and not answered:
        await message.answer("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    if unanswered:
        await message.answer("üìã *–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:*", parse_mode="Markdown")
        for review_id, user_id_r, username, review_text in unanswered:
            parts = parse_review_text(review_text)
            text = (
                f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (id: {user_id_r}):\n\n"
                f"üì¢ *–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏:*\n{parts['source'] or '_–Ω–µ —É–∫–∞–∑–∞–Ω–æ_'}\n\n"
                f"üìù *–û—Ç–∑—ã–≤:*\n{parts['review'] or '_–ø—É—Å—Ç–æ–π_'}\n\n"
                f"üé® *–¢–µ–º—ã –≤—ã—Å—Ç–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª(–∞) –±—ã –≤–∏–¥–µ—Ç—å:*\n{parts['subject'] or '_–Ω–µ —É–∫–∞–∑–∞–Ω–æ_'}"
            )
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{review_id}_{user_id_r}")]
            ])
            await message.answer(text, parse_mode="Markdown", reply_markup=kb)
    else:
        await message.answer("–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")

    if answered:
        await message.answer("‚úÖ *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:*", parse_mode="Markdown")
        for review_id, user_id_r, username, review_text, admin_answer in answered:
            parts = parse_review_text(review_text)
            text = (
                f"–û—Ç–∑—ã–≤ #{review_id} –æ—Ç @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (id: {user_id_r}):\n\n"
                f"üì¢ *–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏:*\n{parts['source'] or '_–Ω–µ —É–∫–∞–∑–∞–Ω–æ_'}\n\n"
                f"üìù *–û—Ç–∑—ã–≤:*\n{parts['review'] or '_–ø—É—Å—Ç–æ–π_'}\n\n"
                f"üé® *–¢–µ–º—ã –≤—ã—Å—Ç–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª(–∞) –±—ã –≤–∏–¥–µ—Ç—å:*\n{parts['subject'] or '_–Ω–µ —É–∫–∞–∑–∞–Ω–æ_'}\n\n"
                f"üí¨ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n{admin_answer}"
            )
            await message.answer(text, parse_mode="Markdown")
    else:
        await message.answer("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")



@start_router.message(Command(commands=["answer"]))
async def cmd_answer_review(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /answer <id> ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∑—ã–≤.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /answer")
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∫ /answer")
        return

    text = message.text or ""
    parts = text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞. –ü—Ä–∏–º–µ—Ä: /answer 123")
        return

    review_id = int(parts[1])

    cursor = review_db.conn.execute(
        "SELECT user_id, answered FROM reviews WHERE id = ?", (review_id,)
    )
    row = cursor.fetchone()
    if not row:
        await message.answer(f"–û—Ç–∑—ã–≤ —Å ID {review_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logger.warning(f"–û—Ç–∑—ã–≤ —Å ID {review_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    review_user_id, answered = row
    if answered:
        await message.answer(f"–û—Ç–∑—ã–≤ #{review_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        logger.info(f"–û—Ç–∑—ã–≤ #{review_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return

    await state.update_data(review_id=review_id, user_id=review_user_id)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id}:")
    await state.set_state(AdminAnswer.waiting_for_answer)
    logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id}")


@start_router.message(Command('statistic'))
async def cmd_statistics(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /statistic ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /statistic")
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∫ /statistic")
        return

    user_count = review_db.count_users()
    review_count = review_db.count_reviews()

    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö—Å—è –±–æ—Ç–æ–º: {user_count}\n"
        f"üìù –û—Ç–∑—ã–≤–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {review_count}"
    )
    await message.answer(text, parse_mode="Markdown")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


@start_router.message(Command(commands=["admin"]))
async def cmd_admin(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /admin")
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∫ /admin")
        return

    await message.answer("üìã *–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:*\n\n\
        '/reviews' - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤;\n\
        '/all_reviews' - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (—Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∞) –∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö;\n\
        '/answer &lt;id&gt;' - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º id;\n\
        '/statistic' - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", parse_mode="HTML")


async def send_admin_new_review_notification(
        review_id: int,
        user_id_ms: int,
        username: str | None,
        free_review: str,
        source: str,
        subject: str,
        admin_id: int
    ):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å".

    :param review_id: ID –æ—Ç–∑—ã–≤–∞
    :param user_id_ms: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –æ—Ç–∑—ã–≤
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param free_review: –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    :param source: –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    :param admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    text = (
        f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ #{review_id} –æ—Ç @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}:\n\n"
        f"üì¢ –í–æ–ø—Ä–æ—Å 1: –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –≤—ã—Å—Ç–∞–≤–∫–µ?\n"
        f"–û—Ç–≤–µ—Ç: {source}\n\n"
        f"üìù –í–æ–ø—Ä–æ—Å 2: –í —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞–º –≤—ã—Å—Ç–∞–≤–∫–∞? –ö–∞–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n"
        f"–û—Ç–≤–µ—Ç: {free_review}\n\n"
        f"üé® –í–æ–ø—Ä–æ—Å 3: –¢–µ–º—ã –≤—ã—Å—Ç–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª(–∞) –±—ã –≤–∏–¥–µ—Ç—å:\n"
        f"–û—Ç–≤–µ—Ç: {subject}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"answer_{review_id}_{user_id_ms}"
            )
        ]
    ])
    try:
        await bot.send_message(admin_id, text, reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –æ –æ—Ç–∑—ã–≤–µ #{review_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

